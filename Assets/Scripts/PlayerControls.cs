//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""a4c0803b-fb8b-426c-b039-ccd690708aa6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7fe0e115-8c15-4722-aa4d-67c2728211c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c4fd0dbc-d80d-46d8-a575-1d5a12209e39"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot Primary"",
                    ""type"": ""Button"",
                    ""id"": ""d42b2c52-d893-4696-b827-9ba73a255b40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""bd4348f6-3916-4ba2-a805-4b6516f77b13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""823bea13-a400-4d52-80b7-fb27dd4d780b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""99b9a443-86fd-494c-a7a5-321a79c6623f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Edit mode"",
                    ""type"": ""Button"",
                    ""id"": ""6a69ef16-ac97-4aea-8a61-0fb1a35b27d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ef3c02c8-9d0a-4dbf-b0a9-77c99116afdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1f1ead5-255c-477b-9bc5-974a6b6d704f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2203390b-dbdd-4a0d-a5a0-eb85d59df50d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0005320b-2e80-4c86-98a5-62099d5242c7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""18a132fc-4991-4948-83fc-ade06edf34a4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d702dbb6-de20-4ec9-a96b-f7f678cfa8e7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4cd1cc45-be15-468a-9f26-913d8fe28742"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5b4fda84-faee-49aa-a23f-89588f1fe8f8"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04686da5-059b-4a64-8121-59bfdf173bca"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aad5090b-5b54-4234-b511-7ac82496193f"",
                    ""path"": ""<DualShockGamepad>/rightShoulder"",
                    ""interactions"": ""Tap(duration=0.05)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c6b0b6f-2b17-4a52-b23a-a561c567e7f5"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Tap(duration=0.05)"",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Shoot Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f99fa641-131e-42cd-b4aa-ccca456fb725"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": ""Tap(duration=0.01)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2b8e495-e681-42c0-8cb1-4431e35cb512"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap(duration=0.05)"",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Shoot Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d211ee1-4878-47f5-bcc2-3d0c67867dbc"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef2479cb-19c9-44ef-b1b8-48a27461773a"",
                    ""path"": ""<VirtualMouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8b363a3-75c8-4502-b7e0-45394df005aa"",
                    ""path"": ""<DualShockGamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Edit mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e10294cb-6044-486e-9fe4-5759f2f0e8c0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EditMode"",
            ""id"": ""707d3235-81a8-4143-8e9a-4fc83c5965a9"",
            ""actions"": [
                {
                    ""name"": ""Camera Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""67e01353-e0fb-4fae-afc9-26466dfe2c51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Object Right"",
                    ""type"": ""Button"",
                    ""id"": ""3d2b4c7e-ba18-4890-8dc4-9c254e047029"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Object Left"",
                    ""type"": ""Button"",
                    ""id"": ""c22f4be7-bad2-42f3-a223-533c9dc836b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Left"",
                    ""type"": ""Button"",
                    ""id"": ""20860a46-7d81-4635-bbb8-960b10530027"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Right"",
                    ""type"": ""Button"",
                    ""id"": ""c255582d-5c39-4dec-906e-a458f3057048"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Button"",
                    ""id"": ""d9dc5299-19b1-4f96-9f66-29268c899d0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a462405e-d7b2-4389-a9fa-fd8329d11653"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""315595b9-54b0-46a0-adb7-03d988fdc197"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85785611-e553-404c-a094-acad1018c683"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cycle Object Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54a51727-5053-47e5-b13c-5e8c2578e2c7"",
                    ""path"": ""<DualShockGamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cycle Object Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2b93d14-a299-4608-9a97-85bf2ad056c7"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7964bb17-297a-47b8-8dfe-244b865f94db"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05bcc18e-bfa5-4bc4-b4eb-9a5bd3a00b42"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Abilities"",
            ""id"": ""8e1d3089-79b3-4506-8e2d-84e4188b8dc3"",
            ""actions"": [
                {
                    ""name"": ""Activate Special"",
                    ""type"": ""Button"",
                    ""id"": ""9502e2a3-8b9d-4c3a-9823-23419207e998"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""62b613e5-70a5-4237-8b2f-cb18e949a87e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f393283d-0ec9-4d38-bab5-0c734f071bf3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Activate Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a8a458b-f91c-4bca-a504-4c29a3486c76"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Activate Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee816d48-7ead-456e-b595-58ee1eb433ae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Movement = m_Controls.FindAction("Movement", throwIfNotFound: true);
        m_Controls_Aim = m_Controls.FindAction("Aim", throwIfNotFound: true);
        m_Controls_ShootPrimary = m_Controls.FindAction("Shoot Primary", throwIfNotFound: true);
        m_Controls_ShootSecondary = m_Controls.FindAction("Shoot Secondary", throwIfNotFound: true);
        m_Controls_Debug = m_Controls.FindAction("Debug", throwIfNotFound: true);
        m_Controls_Point = m_Controls.FindAction("Point", throwIfNotFound: true);
        m_Controls_Editmode = m_Controls.FindAction("Edit mode", throwIfNotFound: true);
        m_Controls_Dash = m_Controls.FindAction("Dash", throwIfNotFound: true);
        // EditMode
        m_EditMode = asset.FindActionMap("EditMode", throwIfNotFound: true);
        m_EditMode_CameraMovement = m_EditMode.FindAction("Camera Movement", throwIfNotFound: true);
        m_EditMode_CycleObjectRight = m_EditMode.FindAction("Cycle Object Right", throwIfNotFound: true);
        m_EditMode_CycleObjectLeft = m_EditMode.FindAction("Cycle Object Left", throwIfNotFound: true);
        m_EditMode_RotateLeft = m_EditMode.FindAction("Rotate Left", throwIfNotFound: true);
        m_EditMode_RotateRight = m_EditMode.FindAction("Rotate Right", throwIfNotFound: true);
        m_EditMode_PlaceObject = m_EditMode.FindAction("PlaceObject", throwIfNotFound: true);
        // Abilities
        m_Abilities = asset.FindActionMap("Abilities", throwIfNotFound: true);
        m_Abilities_ActivateSpecial = m_Abilities.FindAction("Activate Special", throwIfNotFound: true);
        m_Abilities_Cancel = m_Abilities.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_Controls_Movement;
    private readonly InputAction m_Controls_Aim;
    private readonly InputAction m_Controls_ShootPrimary;
    private readonly InputAction m_Controls_ShootSecondary;
    private readonly InputAction m_Controls_Debug;
    private readonly InputAction m_Controls_Point;
    private readonly InputAction m_Controls_Editmode;
    private readonly InputAction m_Controls_Dash;
    public struct ControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Controls_Movement;
        public InputAction @Aim => m_Wrapper.m_Controls_Aim;
        public InputAction @ShootPrimary => m_Wrapper.m_Controls_ShootPrimary;
        public InputAction @ShootSecondary => m_Wrapper.m_Controls_ShootSecondary;
        public InputAction @Debug => m_Wrapper.m_Controls_Debug;
        public InputAction @Point => m_Wrapper.m_Controls_Point;
        public InputAction @Editmode => m_Wrapper.m_Controls_Editmode;
        public InputAction @Dash => m_Wrapper.m_Controls_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMovement;
                @Aim.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAim;
                @ShootPrimary.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShootPrimary;
                @ShootPrimary.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShootPrimary;
                @ShootPrimary.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShootPrimary;
                @ShootSecondary.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShootSecondary;
                @ShootSecondary.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShootSecondary;
                @ShootSecondary.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShootSecondary;
                @Debug.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDebug;
                @Debug.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDebug;
                @Debug.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDebug;
                @Point.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnPoint;
                @Editmode.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnEditmode;
                @Editmode.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnEditmode;
                @Editmode.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnEditmode;
                @Dash.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @ShootPrimary.started += instance.OnShootPrimary;
                @ShootPrimary.performed += instance.OnShootPrimary;
                @ShootPrimary.canceled += instance.OnShootPrimary;
                @ShootSecondary.started += instance.OnShootSecondary;
                @ShootSecondary.performed += instance.OnShootSecondary;
                @ShootSecondary.canceled += instance.OnShootSecondary;
                @Debug.started += instance.OnDebug;
                @Debug.performed += instance.OnDebug;
                @Debug.canceled += instance.OnDebug;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Editmode.started += instance.OnEditmode;
                @Editmode.performed += instance.OnEditmode;
                @Editmode.canceled += instance.OnEditmode;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // EditMode
    private readonly InputActionMap m_EditMode;
    private IEditModeActions m_EditModeActionsCallbackInterface;
    private readonly InputAction m_EditMode_CameraMovement;
    private readonly InputAction m_EditMode_CycleObjectRight;
    private readonly InputAction m_EditMode_CycleObjectLeft;
    private readonly InputAction m_EditMode_RotateLeft;
    private readonly InputAction m_EditMode_RotateRight;
    private readonly InputAction m_EditMode_PlaceObject;
    public struct EditModeActions
    {
        private @PlayerControls m_Wrapper;
        public EditModeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMovement => m_Wrapper.m_EditMode_CameraMovement;
        public InputAction @CycleObjectRight => m_Wrapper.m_EditMode_CycleObjectRight;
        public InputAction @CycleObjectLeft => m_Wrapper.m_EditMode_CycleObjectLeft;
        public InputAction @RotateLeft => m_Wrapper.m_EditMode_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_EditMode_RotateRight;
        public InputAction @PlaceObject => m_Wrapper.m_EditMode_PlaceObject;
        public InputActionMap Get() { return m_Wrapper.m_EditMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditModeActions set) { return set.Get(); }
        public void SetCallbacks(IEditModeActions instance)
        {
            if (m_Wrapper.m_EditModeActionsCallbackInterface != null)
            {
                @CameraMovement.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCameraMovement;
                @CycleObjectRight.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCycleObjectRight;
                @CycleObjectRight.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCycleObjectRight;
                @CycleObjectRight.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCycleObjectRight;
                @CycleObjectLeft.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCycleObjectLeft;
                @CycleObjectLeft.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCycleObjectLeft;
                @CycleObjectLeft.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnCycleObjectLeft;
                @RotateLeft.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnRotateLeft;
                @RotateRight.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnRotateRight;
                @RotateRight.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnRotateRight;
                @RotateRight.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnRotateRight;
                @PlaceObject.started -= m_Wrapper.m_EditModeActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.performed -= m_Wrapper.m_EditModeActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.canceled -= m_Wrapper.m_EditModeActionsCallbackInterface.OnPlaceObject;
            }
            m_Wrapper.m_EditModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraMovement.started += instance.OnCameraMovement;
                @CameraMovement.performed += instance.OnCameraMovement;
                @CameraMovement.canceled += instance.OnCameraMovement;
                @CycleObjectRight.started += instance.OnCycleObjectRight;
                @CycleObjectRight.performed += instance.OnCycleObjectRight;
                @CycleObjectRight.canceled += instance.OnCycleObjectRight;
                @CycleObjectLeft.started += instance.OnCycleObjectLeft;
                @CycleObjectLeft.performed += instance.OnCycleObjectLeft;
                @CycleObjectLeft.canceled += instance.OnCycleObjectLeft;
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
                @PlaceObject.started += instance.OnPlaceObject;
                @PlaceObject.performed += instance.OnPlaceObject;
                @PlaceObject.canceled += instance.OnPlaceObject;
            }
        }
    }
    public EditModeActions @EditMode => new EditModeActions(this);

    // Abilities
    private readonly InputActionMap m_Abilities;
    private IAbilitiesActions m_AbilitiesActionsCallbackInterface;
    private readonly InputAction m_Abilities_ActivateSpecial;
    private readonly InputAction m_Abilities_Cancel;
    public struct AbilitiesActions
    {
        private @PlayerControls m_Wrapper;
        public AbilitiesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateSpecial => m_Wrapper.m_Abilities_ActivateSpecial;
        public InputAction @Cancel => m_Wrapper.m_Abilities_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_Abilities; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilitiesActions set) { return set.Get(); }
        public void SetCallbacks(IAbilitiesActions instance)
        {
            if (m_Wrapper.m_AbilitiesActionsCallbackInterface != null)
            {
                @ActivateSpecial.started -= m_Wrapper.m_AbilitiesActionsCallbackInterface.OnActivateSpecial;
                @ActivateSpecial.performed -= m_Wrapper.m_AbilitiesActionsCallbackInterface.OnActivateSpecial;
                @ActivateSpecial.canceled -= m_Wrapper.m_AbilitiesActionsCallbackInterface.OnActivateSpecial;
                @Cancel.started -= m_Wrapper.m_AbilitiesActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_AbilitiesActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_AbilitiesActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_AbilitiesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActivateSpecial.started += instance.OnActivateSpecial;
                @ActivateSpecial.performed += instance.OnActivateSpecial;
                @ActivateSpecial.canceled += instance.OnActivateSpecial;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public AbilitiesActions @Abilities => new AbilitiesActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShootPrimary(InputAction.CallbackContext context);
        void OnShootSecondary(InputAction.CallbackContext context);
        void OnDebug(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnEditmode(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IEditModeActions
    {
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnCycleObjectRight(InputAction.CallbackContext context);
        void OnCycleObjectLeft(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnPlaceObject(InputAction.CallbackContext context);
    }
    public interface IAbilitiesActions
    {
        void OnActivateSpecial(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
